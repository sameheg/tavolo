
CafeSaaS — RUNBOOK for Codex (24h Single Sprint)
Generated: 2025-09-08

Goal
-----
Ship a working Laravel-12 modular monolith (POMM + DDD + Hex + CQRS) with Tenancy + Feature Flags,
and create baseline modules with /api/{module}/ping endpoints, wired to CI and Actions.
All work tracked in the milestone: "Sprint — Full Delivery 24h".

Conventions
-----------
- Branch: feature/<module>-bootstrap (e.g., feature/core-bootstrap)
- Commits: chore|feat|fix(scope): message  (Conventional Commits)
- PR title: [Module] <Name> — Bootstrap
- Labels: module, enhancement (if applicable)
- PHP: 8.3 / Laravel: ^12.0

Prereqs
-------
- Repo already contains workflows/ops from R7; Issues are opened by Actions.
- You are in Codespaces or local dev (write access). If not, create Codespace now.

SECTION A — Bootstrap Laravel App
---------------------------------
1) Initialize Laravel 12 (if the repo is empty of PHP app files):
   Terminal:
   $ composer create-project laravel/laravel . "^12.0"
   $ composer require laravel/sanctum:"^4.0" laravel/pennant:"^1.0" stancl/tenancy:"^4.0" open-telemetry/opentelemetry-laravel:"^1.0"

2) Add Module Registry provider:
   Create file: app/Providers/ModuleRegistryServiceProvider.php
   ---8<---
   <?php
   namespace App\Providers; use Illuminate\Support\ServiceProvider;
   class ModuleRegistryServiceProvider extends ServiceProvider {
     public function register(): void {}
     public function boot(): void {
       foreach (config('module_registry.paths',[]) as $pattern) {
         foreach (glob($pattern) as $file) {
           $meta = json_decode(file_get_contents($file), true); if(!is_array($meta)) continue;
           foreach(($meta['providers']??[]) as $p){ try{$this->app->register($p);}catch(\Throwable $e){logger()->warning('Module provider failed',['p'=>$p,'e'=>$e->getMessage()]);}}
         }
       }
       $this->publishes([ __DIR__.'/../../config/module_registry.php' => config_path('module_registry.php') ], 'cafesaas-registry');
     }
   }
   ---8<---

   Create file: config/module_registry.php
   ---8<---
   <?php
   return [
     'paths' => [ base_path('modules/*/module.json') ],
     'defaults' => ['pos'] // modules to auto-migrate per-tenant
   ];
   ---8<---

3) Add Tenancy & Feature providers:
   Create file: app/Providers/TenancyServiceProvider.php
   ---8<---
   <?php
   namespace App\Providers;
   use Illuminate\Support\ServiceProvider;
   use Stancl\Tenancy\Events\TenantCreated;
   use Stancl\Tenancy\Tenancy;
   use Illuminate\Support\Facades\Artisan;

   class TenancyServiceProvider extends ServiceProvider {
     public function register(): void {}
     public function boot(): void {
       Tenancy::eventListener(TenantCreated::class, function (TenantCreated $event) {
         $defaults = config('module_registry.defaults', []);
         $event->tenant->run(function () use ($defaults) {
           foreach ($defaults as $module) {
             $path = base_path("modules/{$module}/src/Infrastructure/Migrations");
             if (is_dir($path)) {
               Artisan::call('migrate', ['--path' => "modules/{$module}/src/Infrastructure/Migrations", '--force' => true]);
             }
           }
         });
       });
     }
   }
   ---8<---

   Create file: app/Providers/FeatureServiceProvider.php
   ---8<---
   <?php
   namespace App\Providers;
   use Illuminate\Support\ServiceProvider;
   use Laravel\Pennant\Feature;
   class FeatureServiceProvider extends ServiceProvider {
     public function register(): void {}
     public function boot(): void {
       Feature::resolveScopeUsing(function () {
         if (function_exists('tenant') && tenant()) { return 'tenant:'.tenant('id'); }
         return null;
       });
     }
   }
   ---8<---

4) Register providers in config/app.php (providers array):
   Add lines:
   - App\Providers\ModuleRegistryServiceProvider::class,
   - App\Providers\TenancyServiceProvider::class,
   - App\Providers\FeatureServiceProvider::class,

5) Install Tenancy & Pennant tables and run migrations:
   Terminal:
   $ php artisan vendor:publish --tag=cafesaas-registry --force
   $ php artisan tenancy:install
   $ php artisan pennant:table
   $ php artisan migrate

6) Add Outbox table (if missing):
   Create file: database/migrations/2025_09_08_000000_create_outbox_messages_table.php
   ---8<---
   <?php
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
   return new class extends Migration {
     public function up(): void {
       Schema::create('outbox_messages', function (Blueprint $t) {
         $t->uuid('id')->primary();
         $t->string('aggregate_type');
         $t->string('aggregate_id');
         $t->string('event_type');
         $t->json('payload');
         $t->timestamp('occurred_at');
         $t->timestamp('published_at')->nullable();
         $t->timestamps();
       });
     }
     public function down(): void { Schema::dropIfExists('outbox_messages'); }
   };
   ---8<---
   Terminal:
   $ php artisan migrate

SECTION B — Module Scaffolding (Ping-ready)
-------------------------------------------
7) Create the base folders:
   Terminal:
   $ mkdir -p modules/pos/src/Infrastructure/Routes
   $ mkdir -p modules/catalog/src/Infrastructure/Routes
   (repeat for: pricing, inventory, supply-chain, kds, table, online-ordering, crm, billing, compliance, reporting, employee, recruitment, marketplace, leasing, core, security, super-admin, orchestrator, integrations, notifications)

8) For each module <slug>, create:
   - modules/<slug>/module.json
   - modules/<slug>/composer.json
   - modules/<slug>/src/Infrastructure/<StudlyName>ServiceProvider.php
   - modules/<slug>/src/Infrastructure/Routes/api.php

   Example (POS):

   modules/pos/module.json
   ---8<---
   {
     "name": "POS",
     "slug": "pos",
     "version": "1.0.0",
     "providers": ["CafeSaaS\\POS\\Infrastructure\\POSServiceProvider"],
     "routes": ["api"],
     "permissions": ["pos.view"],
     "depends_on": [],
     "migrations": []
   }
   ---8<---

   modules/pos/composer.json
   ---8<---
   {
     "name": "cafesaas/pos",
     "type": "library",
     "autoload": {"psr-4": {"CafeSaaS\\POS\\": "src/"} },
     "extra": {"laravel": {"providers": ["CafeSaaS\\POS\\Infrastructure\\POSServiceProvider"]}}
   }
   ---8<---

   modules/pos/src/Infrastructure/POSServiceProvider.php
   ---8<---
   <?php
   namespace CafeSaaS\\POS\\Infrastructure; use Illuminate\\Support\\ServiceProvider;
   final class POSServiceProvider extends ServiceProvider { public function boot(): void { $this->loadRoutesFrom(__DIR__.'/Routes/api.php'); } }
   ---8<---

   modules/pos/src/Infrastructure/Routes/api.php
   ---8<---
   <?php
   use Illuminate\\Support\\Facades\\Route;
   Route::prefix('api/pos')->group(function(){
     Route::get('ping', fn() => response()->json(['ok'=>true,'module'=>'pos']));
   });
   ---8<---

   Repeat the same pattern for all modules (change namespaces/slug).

9) Autoload & discover:
   Terminal:
   $ composer dump-autoload
   $ php artisan route:list | grep api/
   $ php artisan serve --host 0.0.0.0 --port 8000
   $ curl http://localhost:8000/api/pos/ping

SECTION C — Wire Issues to Work
-------------------------------
10) For each Phase (start with Phase 0 issues only):
    a) Create branch:  git checkout -b feature/<module>-bootstrap
    b) Implement ping scaffold for that module (as in Section B).
    c) Commit:        git add -A && git commit -m "feat({module}): bootstrap provider+routes+module.json"
    d) Push:          git push -u origin feature/<module>-bootstrap
    e) PR:            Open PR titled "[Module] <Name> — Bootstrap", link to the Issue (Fixes #<id>), labels: module
    f) Merge after CI green.

11) After Phase 0 merged, proceed Phase 1→2→3… (same steps).

SECTION D — Codex Prompts (Copy/Paste)
--------------------------------------
Use these exact prompts inside Codex to drive end-to-end work.

[Prompt 1 — Bootstrap App]
> Act as a senior Laravel platform engineer. In this repo, initialize a Laravel ^12.0 app and install Sanctum, Pennant, and stancl/tenancy. Then add three providers: ModuleRegistryServiceProvider, TenancyServiceProvider, FeatureServiceProvider, exactly as described in RUNBOOK_CODEX_24H.txt Section A (copy code). Update config/app.php providers accordingly, publish cafesaas-registry, run tenancy:install, pennant:table, and migrate. Open a PR "Platform — Bootstrap Core Providers".

[Prompt 2 — Generate Ping Modules (Phase 0)]
> For Issues with label "module" in milestone "Sprint — Full Delivery 24h", limited to Phase 0 (core, security, super-admin, orchestrator, integrations, notifications): create branches feature/<slug>-bootstrap and add ping scaffolds per RUNBOOK Section B (module.json, composer.json, ServiceProvider, Routes/api.php). Commit and open PRs referencing each Issue. Ensure composer dump-autoload and route:list pass.

[Prompt 3 — Tenancy Sanity]
> Create a quick Tenant factory + command to create a sample tenant and hit /api/pos/ping under tenant context. Verify migrations run per-tenant via TenancyServiceProvider. Add minimal docs in docs/BLUEPRINT.md. PR: "Core — Tenancy sanity".

[Prompt 4 — Phase 1–2 Ping Modules]
> Repeat Prompt 2 for Phase 1 and Phase 2 modules (catalog, pricing, inventory, supply-chain, pos, kds, table, online-ordering).

[Prompt 5 — Phase 3–5 Ping Modules]
> Repeat Prompt 2 for Phase 3–5 modules (crm, billing, compliance, reporting, employee, recruitment, marketplace, leasing).

[Prompt 6 — CI & Quality]
> Add phpstan.neon (max), deptrac.yaml with DDD boundaries (Domain, Application, Infrastructure, Laravel), and a basic GitHub Actions CI (phpstan + deptrac). PR: "CI — Static analysis and boundaries".

[Prompt 7 — Admin UX Placeholder]
> Add a placeholder Admin route group and a Blade entry page listing enabled modules from module registry + flags. PR: "Admin — Modules list placeholder".

Acceptance Checklist (per module PR)
------------------------------------
- [ ] provider loads routes (GET /api/<slug>/ping returns ok:true)
- [ ] module.json registered and autoload configured
- [ ] no CI failures (phpstan/deptrac where applicable)
- [ ] Issue is linked and milestone set
- [ ] Branch merged into main

Notes
-----
- If Codex cannot run commands, open PRs that add files with the exact contents pasted above. CI will validate structure.
- You can throttle scope by labels: module vs enhancement.
- For advanced features (HQ/CDP/etc.), keep them for later; stick to ping scaffolds within 24h.

EOF
